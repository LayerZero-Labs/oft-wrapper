{
  "address": "0xA08E29c3D3aA34C5Fd5a0E0eeC2879E927D101eF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultBps",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WrapperFeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes2",
          "name": "partnerId",
          "type": "bytes2"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wrapperFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "callerFee",
          "type": "uint256"
        }
      ],
      "name": "WrapperFees",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BPS_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "estimateSendFeeV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_callerBps",
          "type": "uint256"
        }
      ],
      "name": "getAmountAndFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wrapperFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "callerFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oftBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nativeOft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendNativeOFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nativeOft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendNativeOFTFeeV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendOFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendOFTFeeV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendOFTV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyOft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendProxyOFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyOft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendProxyOFTFeeV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyOft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendProxyOFTV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setOFTBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a574078aa26e58fbbb1b36f5d2738c72f9cb56ca92b6bf825053c2c1f4744f9",
  "receipt": {
    "to": null,
    "from": "0x58977FFf048492B7bE11Fc6e82f9B9825b154069",
    "contractAddress": "0xA08E29c3D3aA34C5Fd5a0E0eeC2879E927D101eF",
    "transactionIndex": 0,
    "gasUsed": "3129168",
    "logsBloom": "0x
    "blockHash": "0xdc591cd701bdbe691f8a61d6fcf84f1ae4a63f41a0befb60c9c008ae64cc1a3c",
    "transactionHash": "0x7a574078aa26e58fbbb1b36f5d2738c72f9cb56ca92b6bf825053c2c1f4744f9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 324454859,
        "transactionHash": "0x7a574078aa26e58fbbb1b36f5d2738c72f9cb56ca92b6bf825053c2c1f4744f9",
        "address": "0xA08E29c3D3aA34C5Fd5a0E0eeC2879E927D101eF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058977fff048492b7be11fc6e82f9b9825b154069"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdc591cd701bdbe691f8a61d6fcf84f1ae4a63f41a0befb60c9c008ae64cc1a3c"
      }
    ],
    "blockNumber": 324454859,
    "cumulativeGasUsed": "3129168",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "c6baa981b3e88e727ffed6768ba0da42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultBps\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WrapperFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wrapperFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callerFee\",\"type\":\"uint256\"}],\"name\":\"WrapperFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"estimateSendFeeV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callerBps\",\"type\":\"uint256\"}],\"name\":\"getAmountAndFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrapperFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callerFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oftBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeOft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendNativeOFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeOft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendNativeOFTFeeV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendOFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendOFTFeeV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendOFTV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyOft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendProxyOFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyOft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendProxyOFTFeeV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyOft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendProxyOFTV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setOFTBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OFTWrapper.sol\":\"OFTWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/token/oft/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the OFT standard\\n */\\ninterface IOFT is IOFTCore, IERC20 {\\n\\n}\\n\",\"keccak256\":\"0x102ab1f2484ffa58d3b913e469529e10a4843c655c529c9614468d1e9cf0ff8c\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/IOFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCore is IERC165 {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0xc19c158682e42cad701a6c1f70011b039a2f928b3b491377af981bd5ffebbab8\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/ICommonOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1d034ba786436c1fce8057352c87373098bd1d8026b24c8fbc7be28636d0c15d\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/IOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTV2 is ICommonOFT {\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\",\"keccak256\":\"0xb1d31f341715347d49db4e2c0de27c49bbd70b5b3d9b0adb1050b2b3a305ab87\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/fee/IOFTWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTWithFee is ICommonOFT {\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_minAmount` the minimum amount of tokens to receive on dstChain\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, LzCallParams calldata _callParams) external payable;\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\",\"keccak256\":\"0x1b86d8e77c99346edadfb4ee06f6a5c88ca3b777474cc9f13b88514fe7b9215c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/OFTWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/IOFTV2.sol\\\";\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/fee/IOFTWithFee.sol\\\";\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/IOFT.sol\\\";\\nimport \\\"./interfaces/IOFTWrapper.sol\\\";\\nimport \\\"./interfaces/INativeOFT.sol\\\";\\n\\ncontract OFTWrapper is IOFTWrapper, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IOFT;\\n\\n    uint256 public constant BPS_DENOMINATOR = 10000;\\n    uint256 public constant MAX_UINT = 2**256 - 1; // indicates a bp fee of 0 that overrides the default bps\\n\\n    uint256 public defaultBps;\\n    mapping(address => uint256) public oftBps;\\n\\n    constructor(uint256 _defaultBps) {\\n        require(_defaultBps < BPS_DENOMINATOR, \\\"OFTWrapper: defaultBps >= 100%\\\");\\n        defaultBps = _defaultBps;\\n    }\\n\\n    function setDefaultBps(uint256 _defaultBps) external onlyOwner {\\n        require(_defaultBps < BPS_DENOMINATOR, \\\"OFTWrapper: defaultBps >= 100%\\\");\\n        defaultBps = _defaultBps;\\n    }\\n\\n    function setOFTBps(address _token, uint256 _bps) external onlyOwner {\\n        require(_bps < BPS_DENOMINATOR || _bps == MAX_UINT, \\\"OFTWrapper: oftBps[_oft] >= 100%\\\");\\n        oftBps[_token] = _bps;\\n    }\\n\\n    function withdrawFees(\\n        address _oft,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IOFT(_oft).safeTransfer(_to, _amount);\\n        emit WrapperFeeWithdrawn(_oft, _to, _amount);\\n    }\\n\\n    function sendOFT(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        uint256 amountToSwap = _getAmountAndPayFee(_oft, _amount, _minAmount, _feeObj);\\n        IOFT(_oft).sendFrom{value: msg.value}(msg.sender, _dstChainId, _toAddress, amountToSwap, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function sendProxyOFT(\\n        address _proxyOft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        address token = IOFTV2(_proxyOft).token();\\n        {\\n            uint256 amountToSwap = _getAmountAndPayFeeProxy(token, _amount, _minAmount, _feeObj);\\n\\n            // approve proxy to spend tokens\\n            IOFT(token).safeApprove(_proxyOft, amountToSwap);\\n            IOFT(_proxyOft).sendFrom{value: msg.value}(address(this), _dstChainId, _toAddress, amountToSwap, _refundAddress, _zroPaymentAddress, _adapterParams);\\n        }\\n\\n        // reset allowance if sendFrom() does not consume full amount\\n        if (IOFT(token).allowance(address(this), _proxyOft) > 0) IOFT(token).safeApprove(_proxyOft, 0);\\n    }\\n\\n    function sendNativeOFT(\\n        address _nativeOft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        require(msg.value >= _amount, \\\"OFTWrapper: not enough value sent\\\");\\n\\n        INativeOFT(_nativeOft).deposit{value: _amount}();\\n        uint256 amountToSwap = _getAmountAndPayFeeNative(_nativeOft, _amount, _minAmount, _feeObj);\\n        IOFT(_nativeOft).sendFrom{value: msg.value - _amount}(address(this), _dstChainId, _toAddress, amountToSwap, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function sendOFTV2(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        uint256 amountToSwap = _getAmountAndPayFee(_oft, _amount, _minAmount, _feeObj);\\n        IOFTV2(_oft).sendFrom{value: msg.value}(msg.sender, _dstChainId, _toAddress, amountToSwap, _callParams);\\n    }\\n\\n    function sendOFTFeeV2(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        uint256 amountToSwap = _getAmountAndPayFee(_oft, _amount, _minAmount, _feeObj);\\n        IOFTWithFee(_oft).sendFrom{value: msg.value}(msg.sender, _dstChainId, _toAddress, amountToSwap, _minAmount, _callParams);\\n    }\\n\\n    function sendProxyOFTV2(\\n        address _proxyOft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        address token = IOFTV2(_proxyOft).token();\\n        uint256 amountToSwap = _getAmountAndPayFeeProxy(token, _amount, _minAmount, _feeObj);\\n\\n        // approve proxy to spend tokens\\n        IOFT(token).safeApprove(_proxyOft, amountToSwap);\\n        IOFTV2(_proxyOft).sendFrom{value: msg.value}(address(this), _dstChainId, _toAddress, amountToSwap, _callParams);\\n\\n        // reset allowance if sendFrom() does not consume full amount\\n        if (IOFT(token).allowance(address(this), _proxyOft) > 0) IOFT(token).safeApprove(_proxyOft, 0);\\n    }\\n\\n    function sendProxyOFTFeeV2(\\n        address _proxyOft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        address token = IOFTV2(_proxyOft).token();\\n        uint256 amountToSwap = _getAmountAndPayFeeProxy(token, _amount, _minAmount, _feeObj);\\n\\n        // approve proxy to spend tokens\\n        IOFT(token).safeApprove(_proxyOft, amountToSwap);\\n        IOFTWithFee(_proxyOft).sendFrom{value: msg.value}(address(this), _dstChainId, _toAddress, amountToSwap, _minAmount, _callParams);\\n\\n        // reset allowance if sendFrom() does not consume full amount\\n        if (IOFT(token).allowance(address(this), _proxyOft) > 0) IOFT(token).safeApprove(_proxyOft, 0);\\n    }\\n\\n    function sendNativeOFTFeeV2(\\n        address _nativeOft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        require(msg.value >= _amount, \\\"OFTWrapper: not enough value sent\\\");\\n\\n        INativeOFT(_nativeOft).deposit{value: _amount}();\\n        uint256 amountToSwap = _getAmountAndPayFeeNative(_nativeOft, _amount, _minAmount, _feeObj);\\n        IOFTWithFee(_nativeOft).sendFrom{value: msg.value - _amount}(address(this), _dstChainId, _toAddress, amountToSwap, _minAmount, _callParams);\\n    }\\n\\n    function _getAmountAndPayFeeProxy(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        FeeObj calldata _feeObj\\n    ) internal returns (uint256) {\\n        (uint256 amountToSwap, uint256 wrapperFee, uint256 callerFee) = getAmountAndFees(_token, _amount, _feeObj.callerBps);\\n        require(amountToSwap >= _minAmount && amountToSwap > 0, \\\"OFTWrapper: not enough amountToSwap\\\");\\n\\n        IOFT(_token).safeTransferFrom(msg.sender, address(this), amountToSwap + wrapperFee); // pay wrapper and move proxy tokens to contract\\n        if (callerFee > 0) IOFT(_token).safeTransferFrom(msg.sender, _feeObj.caller, callerFee); // pay caller\\n\\n        emit WrapperFees(_feeObj.partnerId, _token, wrapperFee, callerFee);\\n\\n        return amountToSwap;\\n    }\\n\\n    function _getAmountAndPayFee(address _token, uint256 _amount, uint256 _minAmount, FeeObj calldata _feeObj) internal returns (uint256) {\\n        (uint256 amountToSwap, uint256 wrapperFee, uint256 callerFee) = getAmountAndFees(_token, _amount, _feeObj.callerBps);\\n        require(amountToSwap >= _minAmount && amountToSwap > 0, \\\"OFTWrapper: not enough amountToSwap\\\");\\n\\n        if (wrapperFee > 0) IOFT(_token).safeTransferFrom(msg.sender, address(this), wrapperFee); // pay wrapper\\n        if (callerFee > 0) IOFT(_token).safeTransferFrom(msg.sender, _feeObj.caller, callerFee); // pay caller\\n\\n        emit WrapperFees(_feeObj.partnerId, _token, wrapperFee, callerFee);\\n\\n        return amountToSwap;\\n    }\\n\\n    function _getAmountAndPayFeeNative(\\n        address _nativeOft,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        FeeObj calldata _feeObj\\n    ) internal returns (uint256) {\\n        (uint256 amountToSwap, uint256 wrapperFee, uint256 callerFee) = getAmountAndFees(_nativeOft, _amount, _feeObj.callerBps);\\n        require(amountToSwap >= _minAmount && amountToSwap > 0, \\\"OFTWrapper: not enough amountToSwap\\\");\\n\\n        // pay fee in NativeOFT token as the caller might not be able to receive ETH\\n        // wrapper fee is already in the contract after calling NativeOFT.deposit()\\n        if (callerFee > 0) IOFT(_nativeOft).safeTransfer(_feeObj.caller, callerFee); // pay caller\\n\\n        emit WrapperFees(_feeObj.partnerId, _nativeOft, wrapperFee, callerFee);\\n\\n        return amountToSwap;\\n    }\\n\\n    function getAmountAndFees(\\n        address _token, // will be the token on proxies, and the oft on non-proxy\\n        uint256 _amount,\\n        uint256 _callerBps\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 amount,\\n            uint256 wrapperFee,\\n            uint256 callerFee\\n        )\\n    {\\n        uint256 wrapperBps;\\n\\n        if (oftBps[_token] == MAX_UINT) {\\n            wrapperBps = 0;\\n        } else if (oftBps[_token] > 0) {\\n            wrapperBps = oftBps[_token];\\n        } else {\\n            wrapperBps = defaultBps;\\n        }\\n\\n        require(wrapperBps + _callerBps < BPS_DENOMINATOR, \\\"OFTWrapper: Fee bps >= 100%\\\");\\n\\n        wrapperFee = wrapperBps > 0 ? (_amount * wrapperBps) / BPS_DENOMINATOR : 0;\\n        callerFee = _callerBps > 0 ? (_amount * _callerBps) / BPS_DENOMINATOR : 0;\\n        amount = wrapperFee > 0 || callerFee > 0 ? _amount - wrapperFee - callerFee : _amount;\\n    }\\n\\n    function estimateSendFee(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external view override returns (uint nativeFee, uint zroFee) {\\n        (uint256 amount, , ) = getAmountAndFees(_oft, _amount, _feeObj.callerBps);\\n\\n        return IOFT(_oft).estimateSendFee(_dstChainId, _toAddress, amount, _useZro, _adapterParams);\\n    }\\n\\n    function estimateSendFeeV2(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint256 _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external view override returns (uint nativeFee, uint zroFee) {\\n        (uint256 amount, , ) = getAmountAndFees(_oft, _amount, _feeObj.callerBps);\\n\\n        return IOFTV2(_oft).estimateSendFee(_dstChainId, _toAddress, amount, _useZro, _adapterParams);\\n    }\\n}\\n\",\"keccak256\":\"0x20a9c8691087fbe6f29ea1bfc7a014de506f5050eebd2d58e7a2a2f20308f59f\",\"license\":\"MIT\"},\"contracts/interfaces/INativeOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INativeOFT {\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0xa9dea80c67c5d71206b1ed816caf45e2f8648049a246700c1e02e49dd6bdbdaa\",\"license\":\"MIT\"},\"contracts/interfaces/IOFTWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/IOFTV2.sol\\\";\\n\\ninterface IOFTWrapper {\\n    event WrapperFees(bytes2 indexed partnerId, address token, uint256 wrapperFee, uint256 callerFee);\\n    event WrapperFeeWithdrawn(address indexed oft, address to, uint256 amount);\\n\\n    struct FeeObj {\\n        uint256 callerBps;\\n        address caller;\\n        bytes2 partnerId;\\n    }\\n\\n    function sendOFT(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function sendProxyOFT(\\n        address _proxyOft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function sendNativeOFT(\\n        address _nativeOft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function sendOFTV2(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function sendOFTFeeV2(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function sendProxyOFTV2(\\n        address _proxyOft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function sendProxyOFTFeeV2(\\n        address _proxyOft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function sendNativeOFTFeeV2(\\n        address _nativeOft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function getAmountAndFees(\\n        address _oft,\\n        uint256 _amount,\\n        uint256 _callerBps\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 wrapperFee,\\n            uint256 callerFee\\n        );\\n\\n    function estimateSendFee(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendFeeV2(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external view returns (uint nativeFee, uint zroFee);\\n}\\n\",\"keccak256\":\"0xd4f93d13ca6b6b9be759b1cf12d99bfb914ec4b00d1a89a9456d035bf138b0d1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c8063a8198c00116100ab578063e1a452181161006f578063e1a452181461036c578063e1bafc8014610397578063e55dc4e6146103d5578063e5b5019a146103fe578063f2fde38b14610429578063fdb80c81146104525761012a565b8063a8198c00146102d1578063c3c8032a146102ed578063ca3e534c14610309578063d1b308dc14610325578063dda16a10146103505761012a565b806385154849116100f257806385154849146102075780638bcb586c146102235780638d8c915c1461023f5780638da5cb5b1461027d578063a46d74bc146102a85761012a565b80630c3d27561461012f57806317696f6414610158578063498eff6414610197578063715018a6146101b35780637a751182146101ca575b600080fd5b34801561013b57600080fd5b506101566004803603810190610151919061207f565b61046e565b005b34801561016457600080fd5b5061017f600480360381019061017a91906120bf565b61052c565b60405161018e93929190612121565b60405180910390f35b6101b160048036038101906101ac9190612259565b61071a565b005b3480156101bf57600080fd5b506101c86107c4565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190612365565b6107d8565b6040516101fe9190612392565b60405180910390f35b610221600480360381019061021c9190612402565b6107f0565b005b61023d60048036038101906102389190612402565b610890565b005b34801561024b57600080fd5b50610266600480360381019061026191906124f9565b610a9e565b6040516102749291906125bc565b60405180910390f35b34801561028957600080fd5b50610292610b5a565b60405161029f91906125f4565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca919061260f565b610b83565b005b6102eb60048036038101906102e69190612402565b610bd9565b005b61030760048036038101906103029190612259565b610c77565b005b610323600480360381019061031e9190612402565b610e8f565b005b34801561033157600080fd5b5061033a610fde565b6040516103479190612392565b60405180910390f35b61036a60048036038101906103659190612402565b610fe4565b005b34801561037857600080fd5b506103816111f0565b60405161038e9190612392565b60405180910390f35b3480156103a357600080fd5b506103be60048036038101906103b9919061263c565b6111f6565b6040516103cc9291906125bc565b60405180910390f35b3480156103e157600080fd5b506103fc60048036038101906103f7919061271f565b6112b5565b005b34801561040a57600080fd5b5061041361133d565b6040516104209190612392565b60405180910390f35b34801561043557600080fd5b50610450600480360381019061044b9190612365565b611361565b005b61046c60048036038101906104679190612259565b6113e5565b005b61047661153e565b6127108110806104a557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81145b6104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db906127cf565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000806000807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156105a25760009050610638565b6000600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561063157600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610637565b60025490505b5b6127108582610647919061281e565b10610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e906128c0565b60405180910390fd5b600081116106965760006106b0565b61271081876106a591906128e0565b6106af9190612969565b5b9250600085116106c15760006106db565b61271085876106d091906128e0565b6106da9190612969565b5b915060008311806106ec5750600082115b6106f6578561070e565b818387610703919061299a565b61070d919061299a565b5b93505093509350939050565b6107226115bc565b60006107308c89898561160c565b90508b73ffffffffffffffffffffffffffffffffffffffff16635190563634338e8e8e878d8d8d8d6040518b63ffffffff1660e01b815260040161077c99989796959493929190612a4a565b6000604051808303818588803b15801561079557600080fd5b505af11580156107a9573d6000803e3d6000fd5b5050505050506107b7611773565b5050505050505050505050565b6107cc61153e565b6107d6600061177c565b565b60036020528060005260406000206000915090505481565b6107f86115bc565b60006108068886868561160c565b90508773ffffffffffffffffffffffffffffffffffffffff16632cdf0b9534338a8a868a8a6040518863ffffffff1660e01b815260040161084c96959493929190612c40565b6000604051808303818588803b15801561086557600080fd5b505af1158015610879573d6000803e3d6000fd5b505050505050610887611773565b50505050505050565b6108986115bc565b60008773ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109189190612cbd565b9050600061092882878786611840565b905061095589828473ffffffffffffffffffffffffffffffffffffffff166119a89092919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff16632cdf0b9534308b8b868b8b6040518863ffffffff1660e01b815260040161099996959493929190612c40565b6000604051808303818588803b1580156109b257600080fd5b505af11580156109c6573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e308c6040518363ffffffff1660e01b8152600401610a08929190612cea565b60206040518083038186803b158015610a2057600080fd5b505afa158015610a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a589190612d28565b1115610a8b57610a8a8960008473ffffffffffffffffffffffffffffffffffffffff166119a89092919063ffffffff16565b5b5050610a95611773565b50505050505050565b6000806000610ab28b89866000013561052c565b505090508a73ffffffffffffffffffffffffffffffffffffffff1663365260b48b8b848b8b8b6040518763ffffffff1660e01b8152600401610af996959493929190612d64565b604080518083038186803b158015610b1057600080fd5b505afa158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190612dc0565b92509250509850989650505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b8b61153e565b6127108110610bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc690612e4c565b60405180910390fd5b8060028190555050565b610be16115bc565b6000610bef8886868561160c565b90508773ffffffffffffffffffffffffffffffffffffffff1663695ef6bf34338a8a86896040518763ffffffff1660e01b8152600401610c33959493929190612e6c565b6000604051808303818588803b158015610c4c57600080fd5b505af1158015610c60573d6000803e3d6000fd5b505050505050610c6e611773565b50505050505050565b610c7f6115bc565b60008b73ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc757600080fd5b505afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff9190612cbd565b90506000610d0f828a8a86611840565b9050610d3c8d828473ffffffffffffffffffffffffffffffffffffffff166119a89092919063ffffffff16565b8c73ffffffffffffffffffffffffffffffffffffffff16635190563634308f8f8f878e8e8e8e6040518b63ffffffff1660e01b8152600401610d8699989796959493929190612a4a565b6000604051808303818588803b158015610d9f57600080fd5b505af1158015610db3573d6000803e3d6000fd5b50505050505060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e308f6040518363ffffffff1660e01b8152600401610df6929190612cea565b60206040518083038186803b158015610e0e57600080fd5b505afa158015610e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e469190612d28565b1115610e7957610e788c60008373ffffffffffffffffffffffffffffffffffffffff166119a89092919063ffffffff16565b5b50610e82611773565b5050505050505050505050565b610e976115bc565b83341015610eda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed190612f38565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f2257600080fd5b505af1158015610f36573d6000803e3d6000fd5b50505050506000610f4988868685611b06565b90508773ffffffffffffffffffffffffffffffffffffffff16632cdf0b958634610f73919061299a565b308a8a868a8a6040518863ffffffff1660e01b8152600401610f9a96959493929190612c40565b6000604051808303818588803b158015610fb357600080fd5b505af1158015610fc7573d6000803e3d6000fd5b505050505050610fd5611773565b50505050505050565b60025481565b610fec6115bc565b60008773ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561103457600080fd5b505afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c9190612cbd565b9050600061107c82878786611840565b90506110a989828473ffffffffffffffffffffffffffffffffffffffff166119a89092919063ffffffff16565b8873ffffffffffffffffffffffffffffffffffffffff1663695ef6bf34308b8b868a6040518763ffffffff1660e01b81526004016110eb959493929190612e6c565b6000604051808303818588803b15801561110457600080fd5b505af1158015611118573d6000803e3d6000fd5b505050505060008273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e308c6040518363ffffffff1660e01b815260040161115a929190612cea565b60206040518083038186803b15801561117257600080fd5b505afa158015611186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111aa9190612d28565b11156111dd576111dc8960008473ffffffffffffffffffffffffffffffffffffffff166119a89092919063ffffffff16565b5b50506111e7611773565b50505050505050565b61271081565b600080600061120a8c89866000013561052c565b505090508b73ffffffffffffffffffffffffffffffffffffffff16632a205e3d8c8c8c858c8c8c6040518863ffffffff1660e01b81526004016112539796959493929190612f58565b604080518083038186803b15801561126a57600080fd5b505afa15801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a29190612dc0565b9250925050995099975050505050505050565b6112bd61153e565b6112e882828573ffffffffffffffffffffffffffffffffffffffff16611c349092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff167ff6514f9f283faac4cf3f3a6a702c116227ad0f2c727fb336e4c10b418bc6d6138383604051611330929190612fbd565b60405180910390a2505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b61136961153e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d090613058565b60405180910390fd5b6113e28161177c565b50565b6113ed6115bc565b86341015611430576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142790612f38565b60405180910390fd5b8a73ffffffffffffffffffffffffffffffffffffffff1663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b15801561147857600080fd5b505af115801561148c573d6000803e3d6000fd5b5050505050600061149f8c898985611b06565b90508b73ffffffffffffffffffffffffffffffffffffffff16635190563689346114c9919061299a565b308e8e8e878d8d8d8d6040518b63ffffffff1660e01b81526004016114f699989796959493929190612a4a565b6000604051808303818588803b15801561150f57600080fd5b505af1158015611523573d6000803e3d6000fd5b505050505050611531611773565b5050505050505050505050565b611546611cba565b73ffffffffffffffffffffffffffffffffffffffff16611564610b5a565b73ffffffffffffffffffffffffffffffffffffffff16146115ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b1906130c4565b60405180910390fd5b565b60026001541415611602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f990613130565b60405180910390fd5b6002600181905550565b6000806000806116218888876000013561052c565b9250925092508583101580156116375750600083115b611676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166d906131c2565b60405180910390fd5b60008211156116ad576116ac3330848b73ffffffffffffffffffffffffffffffffffffffff16611cc2909392919063ffffffff16565b5b60008111156116f6576116f5338660200160208101906116cd9190612365565b838b73ffffffffffffffffffffffffffffffffffffffff16611cc2909392919063ffffffff16565b5b846040016020810190611709919061323a565b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f97bcdc1dd7ab82ef93280983f23d391afea463d0333fddd1a4617693b9ccfeea89848460405161175d93929190613267565b60405180910390a2829350505050949350505050565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806000806118558888876000013561052c565b92509250925085831015801561186b5750600083115b6118aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a1906131c2565b60405180910390fd5b6118e2333084866118bb919061281e565b8b73ffffffffffffffffffffffffffffffffffffffff16611cc2909392919063ffffffff16565b600081111561192b5761192a338660200160208101906119029190612365565b838b73ffffffffffffffffffffffffffffffffffffffff16611cc2909392919063ffffffff16565b5b84604001602081019061193e919061323a565b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f97bcdc1dd7ab82ef93280983f23d391afea463d0333fddd1a4617693b9ccfeea89848460405161199293929190613267565b60405180910390a2829350505050949350505050565b6000811480611a41575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016119ef929190612cea565b60206040518083038186803b158015611a0757600080fd5b505afa158015611a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3f9190612d28565b145b611a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7790613310565b60405180910390fd5b611b018363095ea7b360e01b8484604051602401611a9f929190612fbd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d4b565b505050565b600080600080611b1b8888876000013561052c565b925092509250858310158015611b315750600083115b611b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b67906131c2565b60405180910390fd5b6000811115611bb757611bb6856020016020810190611b8f9190612365565b828a73ffffffffffffffffffffffffffffffffffffffff16611c349092919063ffffffff16565b5b846040016020810190611bca919061323a565b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f97bcdc1dd7ab82ef93280983f23d391afea463d0333fddd1a4617693b9ccfeea898484604051611c1e93929190613267565b60405180910390a2829350505050949350505050565b611cb58363a9059cbb60e01b8484604051602401611c53929190612fbd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d4b565b505050565b600033905090565b611d45846323b872dd60e01b858585604051602401611ce393929190613330565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d4b565b50505050565b6000611dad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611e139092919063ffffffff16565b9050600081511480611dcf575080806020019051810190611dce919061337c565b5b611e0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e059061341b565b60405180910390fd5b505050565b6060611e228484600085611e2b565b90509392505050565b606082471015611e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e67906134ad565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611e999190613547565b60006040518083038185875af1925050503d8060008114611ed6576040519150601f19603f3d011682016040523d82523d6000602084013e611edb565b606091505b5091509150611eec87838387611ef8565b92505050949350505050565b60608315611f5b57600083511415611f5357611f1385611f6e565b611f52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f49906135aa565b60405180910390fd5b5b829050611f66565b611f658383611f91565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611fa45781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd8919061360e565b60405180910390fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061201682611feb565b9050919050565b6120268161200b565b811461203157600080fd5b50565b6000813590506120438161201d565b92915050565b6000819050919050565b61205c81612049565b811461206757600080fd5b50565b60008135905061207981612053565b92915050565b6000806040838503121561209657612095611fe1565b5b60006120a485828601612034565b92505060206120b58582860161206a565b9150509250929050565b6000806000606084860312156120d8576120d7611fe1565b5b60006120e686828701612034565b93505060206120f78682870161206a565b92505060406121088682870161206a565b9150509250925092565b61211b81612049565b82525050565b60006060820190506121366000830186612112565b6121436020830185612112565b6121506040830184612112565b949350505050565b600061ffff82169050919050565b61216f81612158565b811461217a57600080fd5b50565b60008135905061218c81612166565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126121b7576121b6612192565b5b8235905067ffffffffffffffff8111156121d4576121d3612197565b5b6020830191508360018202830111156121f0576121ef61219c565b5b9250929050565b600061220282611feb565b9050919050565b612212816121f7565b811461221d57600080fd5b50565b60008135905061222f81612209565b92915050565b600080fd5b6000606082840312156122505761224f612235565b5b81905092915050565b60008060008060008060008060008060006101608c8e03121561227f5761227e611fe1565b5b600061228d8e828f01612034565b9b5050602061229e8e828f0161217d565b9a505060408c013567ffffffffffffffff8111156122bf576122be611fe6565b5b6122cb8e828f016121a1565b995099505060606122de8e828f0161206a565b97505060806122ef8e828f0161206a565b96505060a06123008e828f01612220565b95505060c06123118e828f01612034565b94505060e08c013567ffffffffffffffff81111561233257612331611fe6565b5b61233e8e828f016121a1565b93509350506101006123528e828f0161223a565b9150509295989b509295989b9093969950565b60006020828403121561237b5761237a611fe1565b5b600061238984828501612034565b91505092915050565b60006020820190506123a76000830184612112565b92915050565b6000819050919050565b6123c0816123ad565b81146123cb57600080fd5b50565b6000813590506123dd816123b7565b92915050565b6000606082840312156123f9576123f8612235565b5b81905092915050565b6000806000806000806000610120888a03121561242257612421611fe1565b5b60006124308a828b01612034565b97505060206124418a828b0161217d565b96505060406124528a828b016123ce565b95505060606124638a828b0161206a565b94505060806124748a828b0161206a565b93505060a088013567ffffffffffffffff81111561249557612494611fe6565b5b6124a18a828b016123e3565b92505060c06124b28a828b0161223a565b91505092959891949750929550565b60008115159050919050565b6124d6816124c1565b81146124e157600080fd5b50565b6000813590506124f3816124cd565b92915050565b600080600080600080600080610120898b03121561251a57612519611fe1565b5b60006125288b828c01612034565b98505060206125398b828c0161217d565b975050604061254a8b828c016123ce565b965050606061255b8b828c0161206a565b955050608061256c8b828c016124e4565b94505060a089013567ffffffffffffffff81111561258d5761258c611fe6565b5b6125998b828c016121a1565b935093505060c06125ac8b828c0161223a565b9150509295985092959890939650565b60006040820190506125d16000830185612112565b6125de6020830184612112565b9392505050565b6125ee8161200b565b82525050565b600060208201905061260960008301846125e5565b92915050565b60006020828403121561262557612624611fe1565b5b60006126338482850161206a565b91505092915050565b60008060008060008060008060006101208a8c03121561265f5761265e611fe1565b5b600061266d8c828d01612034565b995050602061267e8c828d0161217d565b98505060408a013567ffffffffffffffff81111561269f5761269e611fe6565b5b6126ab8c828d016121a1565b975097505060606126be8c828d0161206a565b95505060806126cf8c828d016124e4565b94505060a08a013567ffffffffffffffff8111156126f0576126ef611fe6565b5b6126fc8c828d016121a1565b935093505060c061270f8c828d0161223a565b9150509295985092959850929598565b60008060006060848603121561273857612737611fe1565b5b600061274686828701612034565b935050602061275786828701612034565b92505060406127688682870161206a565b9150509250925092565b600082825260208201905092915050565b7f4f4654577261707065723a206f66744270735b5f6f66745d203e3d2031303025600082015250565b60006127b9602083612772565b91506127c482612783565b602082019050919050565b600060208201905081810360008301526127e8816127ac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061282982612049565b915061283483612049565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612869576128686127ef565b5b828201905092915050565b7f4f4654577261707065723a2046656520627073203e3d20313030250000000000600082015250565b60006128aa601b83612772565b91506128b582612874565b602082019050919050565b600060208201905081810360008301526128d98161289d565b9050919050565b60006128eb82612049565b91506128f683612049565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561292f5761292e6127ef565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061297482612049565b915061297f83612049565b92508261298f5761298e61293a565b5b828204905092915050565b60006129a582612049565b91506129b083612049565b9250828210156129c3576129c26127ef565b5b828203905092915050565b6129d781612158565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000612a1a83856129dd565b9350612a278385846129ee565b612a30836129fd565b840190509392505050565b612a44816121f7565b82525050565b600060e082019050612a5f600083018c6125e5565b612a6c602083018b6129ce565b8181036040830152612a7f81898b612a0e565b9050612a8e6060830188612112565b612a9b6080830187612a3b565b612aa860a08301866125e5565b81810360c0830152612abb818486612a0e565b90509a9950505050505050505050565b612ad4816123ad565b82525050565b6000612ae96020840184612220565b905092915050565b612afa816121f7565b82525050565b6000612b0f6020840184612034565b905092915050565b612b208161200b565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112612b5257612b51612b30565b5b83810192508235915060208301925067ffffffffffffffff821115612b7a57612b79612b26565b5b600182023603841315612b9057612b8f612b2b565b5b509250929050565b600082825260208201905092915050565b6000612bb58385612b98565b9350612bc28385846129ee565b612bcb836129fd565b840190509392505050565b600060608301612be96000840184612ada565b612bf66000860182612af1565b50612c046020840184612b00565b612c116020860182612b17565b50612c1f6040840184612b35565b8583036040870152612c32838284612ba9565b925050508091505092915050565b600060c082019050612c5560008301896125e5565b612c6260208301886129ce565b612c6f6040830187612acb565b612c7c6060830186612112565b612c896080830185612112565b81810360a0830152612c9b8184612bd6565b9050979650505050505050565b600081519050612cb78161201d565b92915050565b600060208284031215612cd357612cd2611fe1565b5b6000612ce184828501612ca8565b91505092915050565b6000604082019050612cff60008301856125e5565b612d0c60208301846125e5565b9392505050565b600081519050612d2281612053565b92915050565b600060208284031215612d3e57612d3d611fe1565b5b6000612d4c84828501612d13565b91505092915050565b612d5e816124c1565b82525050565b600060a082019050612d7960008301896129ce565b612d866020830188612acb565b612d936040830187612112565b612da06060830186612d55565b8181036080830152612db3818486612a0e565b9050979650505050505050565b60008060408385031215612dd757612dd6611fe1565b5b6000612de585828601612d13565b9250506020612df685828601612d13565b9150509250929050565b7f4f4654577261707065723a2064656661756c74427073203e3d20313030250000600082015250565b6000612e36601e83612772565b9150612e4182612e00565b602082019050919050565b60006020820190508181036000830152612e6581612e29565b9050919050565b600060a082019050612e8160008301886125e5565b612e8e60208301876129ce565b612e9b6040830186612acb565b612ea86060830185612112565b8181036080830152612eba8184612bd6565b90509695505050505050565b7f4f4654577261707065723a206e6f7420656e6f7567682076616c75652073656e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f22602183612772565b9150612f2d82612ec6565b604082019050919050565b60006020820190508181036000830152612f5181612f15565b9050919050565b600060a082019050612f6d600083018a6129ce565b8181036020830152612f8081888a612a0e565b9050612f8f6040830187612112565b612f9c6060830186612d55565b8181036080830152612faf818486612a0e565b905098975050505050505050565b6000604082019050612fd260008301856125e5565b612fdf6020830184612112565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613042602683612772565b915061304d82612fe6565b604082019050919050565b6000602082019050818103600083015261307181613035565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006130ae602083612772565b91506130b982613078565b602082019050919050565b600060208201905081810360008301526130dd816130a1565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061311a601f83612772565b9150613125826130e4565b602082019050919050565b600060208201905081810360008301526131498161310d565b9050919050565b7f4f4654577261707065723a206e6f7420656e6f75676820616d6f756e74546f5360008201527f7761700000000000000000000000000000000000000000000000000000000000602082015250565b60006131ac602383612772565b91506131b782613150565b604082019050919050565b600060208201905081810360008301526131db8161319f565b9050919050565b60007fffff00000000000000000000000000000000000000000000000000000000000082169050919050565b613217816131e2565b811461322257600080fd5b50565b6000813590506132348161320e565b92915050565b6000602082840312156132505761324f611fe1565b5b600061325e84828501613225565b91505092915050565b600060608201905061327c60008301866125e5565b6132896020830185612112565b6132966040830184612112565b949350505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b60006132fa603683612772565b91506133058261329e565b604082019050919050565b60006020820190508181036000830152613329816132ed565b9050919050565b600060608201905061334560008301866125e5565b61335260208301856125e5565b61335f6040830184612112565b949350505050565b600081519050613376816124cd565b92915050565b60006020828403121561339257613391611fe1565b5b60006133a084828501613367565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613405602a83612772565b9150613410826133a9565b604082019050919050565b60006020820190508181036000830152613434816133f8565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613497602683612772565b91506134a28261343b565b604082019050919050565b600060208201905081810360008301526134c68161348a565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156135015780820151818401526020810190506134e6565b83811115613510576000848401525b50505050565b6000613521826134cd565b61352b81856134d8565b935061353b8185602086016134e3565b80840191505092915050565b60006135538284613516565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613594601d83612772565b915061359f8261355e565b602082019050919050565b600060208201905081810360008301526135c381613587565b9050919050565b600081519050919050565b60006135e0826135ca565b6135ea8185612772565b93506135fa8185602086016134e3565b613603816129fd565b840191505092915050565b6000602082019050818103600083015261362881846135d5565b90509291505056fea2646970667358221220962864269a8c7f49cc5822ebbb95a74290a43290f6013a15893a809cc344fe9f64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6183,
        "contract": "contracts/OFTWrapper.sol:OFTWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6299,
        "contract": "contracts/OFTWrapper.sol:OFTWrapper",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7883,
        "contract": "contracts/OFTWrapper.sol:OFTWrapper",
        "label": "defaultBps",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7887,
        "contract": "contracts/OFTWrapper.sol:OFTWrapper",
        "label": "oftBps",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}